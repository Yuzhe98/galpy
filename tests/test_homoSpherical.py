import os
import sys

# Get current directory
curdir = os.getcwd()
print("Current directory:", curdir)

# Insert into sys.path if not already there
if curdir not in sys.path:
    sys.path.insert(0, curdir)


import numpy
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

from galpy.potential.HomogeneousSpherePotential import HomogeneousSpherePotential



def plot_potential():
    amp = 1
    rho_0 = 3.0 * amp / (2 * numpy.pi)
    solidBall = HomogeneousSpherePotential()
    r_vals = numpy.linspace(0, 10, num=100)
    R_vals = numpy.linspace(0, 10, num=100)
    show_plot = True
    if show_plot:
        # font size
        plt.rc("font", size=11)  # Default text

        fig = plt.figure(figsize=(6.0, 4.0), dpi=150)  # initialize a figure

        gs = gridspec.GridSpec(nrows=2, ncols=2)  # create grid for multiple figures

        # fix the margins
        fig.subplots_adjust(
            top=0.913, bottom=0.156, left=0.119, right=0.972, hspace=0.725, wspace=0.5
        )

        ax_dens = fig.add_subplot(gs[0, 0])
        ax_pot = fig.add_subplot(gs[0, 1], sharex=ax_dens)  #
        ax_R2deriv = fig.add_subplot(gs[1, 0], sharex=ax_dens)  #
        ax_Rforce = fig.add_subplot(gs[1, 1], sharex=ax_dens)  #
        ax_list = [ax_dens, ax_pot, ax_R2deriv, ax_Rforce]
        ax_dens.plot(
            R_vals,
            # solidBall._dens(R=r_vals, z=zero_vals),
            numpy.array(list(map(lambda R: solidBall._dens(R=R, z=0.0), R_vals))),
            label="by HomogeneousSpherePotential",
            color="tab:blue",
            alpha=1,
            linestyle="-",
        )

        ax_dens.set_xlabel("R")
        ax_dens.set_ylabel("Denisty")

        ax_pot.plot(
            R_vals,
            # solidBall._evaluate(R=r_vals, z=zero_vals),
            numpy.array(list(map(lambda R: solidBall._evaluate(R=R, z=0.0), R_vals))),
            label="by HomogeneousSpherePotential",
            color="tab:blue",
            alpha=1,
            linestyle="-",
        )

        ax_pot.set_xlabel("R")
        ax_pot.set_ylabel("Potential")

        ax_R2deriv.plot(
            R_vals,
            # solidBall._evaluate(R=r_vals, z=zero_vals),
            numpy.array(list(map(lambda R: solidBall._R2deriv(R=R, z=0.0), R_vals))),
            label="by HomogeneousSpherePotential",
            color="tab:blue",
            alpha=1,
            linestyle="-",
        )

        ax_R2deriv.set_xlabel("R")
        ax_R2deriv.set_ylabel("R2deriv")

        ax_Rforce.plot(
            R_vals,
            # solidBall._evaluate(R=r_vals, z=zero_vals),
            numpy.array(list(map(lambda R: solidBall._Rforce(R=R, z=0.0), R_vals))),
            label="by HomogeneousSpherePotential",
            color="tab:blue",
            alpha=1,
            linestyle="-",
        )

        ax_Rforce.set_xlabel("R")
        ax_Rforce.set_ylabel("Rforce")

        # set grid and put figure index
        for i, ax in enumerate(ax_list):
            ax.grid()
            # xleft, xright = ax.get_xlim()
            # ybottom, ytop = ax.get_ylim()
            ax.text(
                -0.013,
                1.02,
                s="(" + chr(i + ord("a")) + ")",
                transform=ax.transAxes,
                ha="right",
                va="bottom",
                color="k",
            )
        # ha = 'left' or 'right'
        # va = 'top' or 'bottom'

        #############################################################################
        # put a mark of script information on the figure
        # Get the script name and path automatically
        script_path = os.path.abspath(__file__)

        # Add the annotation to the figure
        plt.annotate(
            f"Generated by: {script_path}",
            xy=(0.02, 0.02),
            xycoords="figure fraction",
            fontsize=3,
            color="gray",
        )
        # #############################################################################
        plt.show()


if __name__ == "__main__":
    plot_potential()
